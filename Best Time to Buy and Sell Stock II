class Solution {
public:
    int usingRecurssion(vector<int>& prices , int index , bool buy){
        if(index >= prices.size()){
            return 0;
        }
        
        int profit1 = 0, profit2 = 0;
        if(buy == true){
            int option1 = -prices[index] + usingRecurssion(prices , index + 1 , 0);

            int option2 = usingRecurssion(prices , index + 1 , 1);

            profit1 = max(option1 , option2);
        }

        else{
            int option1 = prices[index] + usingRecurssion(prices , index + 1 , 1);

            int option2 = usingRecurssion(prices , index + 1 , 0);

            profit2 = max(option1 , option2);
        }

        int finalProfit = max(profit1 , profit2);

        return finalProfit;
    }

    int  Memoization(vector<int>& prices , int index , bool buy , vector<vector<int>> &dp){
        if(index >= prices.size()){
            return 0;
        }

        if(dp[index][buy] != -1){
            return dp[index][buy];
        }
        
        int profit1 = 0, profit2 = 0;
        if(buy == true){
            int option1 = -prices[index] + Memoization(prices , index + 1 , 0 , dp);

            int option2 = Memoization(prices , index + 1 , 1 , dp);

            profit1 = max(option1 , option2);
        }

        else{
            int option1 = prices[index] + Memoization(prices , index + 1 , 1 ,dp);

            int option2 = Memoization(prices , index + 1 , 0 , dp);

            profit2 = max(option1 , option2);
        }

        int finalProfit = max(profit1 , profit2);

        dp[index][buy] = finalProfit;

        return dp[index][buy];
    }

    int Tabulation(vector<int>& prices){
        int n = prices.size();

        vector<vector<int>> dp(n + 1 , vector<int>(2 , 0));

        for(int j = 0 ; j < 2 ; j++){
            dp[n][j] = 0;
        }

        for(int i = n - 1 ; i >= 0 ; i--){
            for(int j = 1 ; j >= 0 ; j--){
                int profit1 = 0, profit2 = 0;
                if(j == 1){
                    int option1 = -prices[i] + dp[i + 1][0];

                    int option2 = dp[i + 1][1];

                    profit1 = max(option1 , option2);
                }

                else{
                    int option1 = prices[i] + dp[i + 1][1];

                    int option2 = dp[i + 1][0];

                    profit2 = max(option1 , option2);
                }

                int finalProfit = max(profit1 , profit2);

                dp[i][j] = finalProfit;
            }
        }

        return dp[0][1];
    }

    int maxProfit(vector<int>& prices) {
        
        // int ans  = usingRecurssion(prices , 0 , true);
        
        // int n = prices.size();

        // vector<vector<int>> dp(n + 1 , vector<int>(2 , -1));

        // int ans  = Memoization(prices , 0 , true , dp);

        int ans  = Tabulation(prices);

        return ans;
    }
};
