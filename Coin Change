class Solution {
public:
    // int usingRecurssion(vector<int>& coins , int amount){
    //     if(amount == 0){
    //         return 0;
    //     }

    //     int ans = INT_MAX;
        
    //     for(int i = 0 ; i < coins.size() ; i++){

    //         if((amount - coins[i]) >= 0){

    //           int  key = usingRecurssion(coins , amount - coins[i]);

    //             if(key != INT_MAX){
    //                 int option1 = 1 + key;

    //                 ans = min(ans , option1);
    //             }
    //         }
    //     }

    //     return ans;

    // }
    int Memoization(vector<int>& coins , int amount , vector<int> &dp){
        if(amount == 0){
            return 0;
        }

        int ans = INT_MAX;
        
        if(dp[amount] != -1){
            return dp[amount];
        }

        for(int i = 0 ; i < coins.size() ; i++){

            if((amount - coins[i]) >= 0){

               int key =  Memoization(coins , amount - coins[i] , dp);

                if(key != INT_MAX){
                    int option1 = 1 + key;

                    ans = min(ans , option1);
                }
            }
        }
        
        dp[amount] = ans;

        return dp[amount];

    }

    int Tabulation(vector<int>& coins, int amount){
        vector<int> dp(amount + 1 , -1);

        dp[0] = 0;

        for(int j = 1 ; j <= amount ; j++){

            int ans = INT_MAX;

            for(int i = 0 ; i < coins.size() ; i++){

            if((j - coins[i]) >= 0){

               int key =  dp[j - coins[i]];

                if(key != INT_MAX){
                    int option1 = 1 + key;

                    ans = min(ans , option1);
                }
            }
        }

        dp[j] = ans;
    }
    
    return dp[amount];
}
    int coinChange(vector<int>& coins, int amount) {
        // int ans = usingRecurssion(coins , amount);

        // vector<int> dp(amount + 1 , -1);

        // int ans =  Memoization(coins , amount, dp);

        int ans = Tabulation(coins , amount);

        if(ans == INT_MAX){
            return -1;
        }

        return ans;
    }
};
