//Using 1D Dynamic Programming
class Solution {
public:
    int solve(vector<int>& coins , int amount , vector<int> &dp){
        if(amount == 0){
            return 0;
        }
        
        if(dp[amount] != -1){
            return dp[amount];
        }
        int ans = INT_MAX;

        for(int i = 0 ; i < coins.size() ; i++){
            int key = 0;

            if((amount - coins[i]) >= 0){
                 key = solve(coins , amount - coins[i] , dp);
                 
                 if(key != INT_MAX){
                    int option = 1 + key;

                    ans = min(ans , option);
                 }
            }
        }

       dp[amount] = ans;
       
       return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) {
        
        vector<int> dp(amount + 1 , -1);
        int ans = solve(coins , amount , dp);
        
         if(ans == INT_MAX){
            return -1;
         }
        
         return ans;
    }
};
