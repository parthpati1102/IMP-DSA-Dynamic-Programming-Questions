class Solution {
public:
    int usingRecurssion(int index1 , int index2 , string &word1 , string &word2){
        if(index1 >= word1.size()){
            return word2.size() - index2;
        }

        if(index2 >= word2.size()){
            return word1.size() - index1;
        }

        int ans = 0;

        if(word1[index1] == word2[index2]){
            ans = usingRecurssion(index1 + 1 , index2 + 1 , word1 , word2);
        }

        else{
            int option1 = 1 + usingRecurssion(index1 + 1 , index2 , word1 , word2);

            int option2 = 1 + usingRecurssion(index1 , index2 + 1 , word1 , word2);

            ans = min(option1 , option2);
        }

        return ans;
    }

    int Memoization(int index1 , int index2 , string &word1 , string &word2 , vector<vector<int>> &dp){
        if(index1 >= word1.size()){
            return word2.size() - index2;
        }

        if(index2 >= word2.size()){
            return word1.size() - index1;
        }

        if(dp[index1][index2] != -1){
            return dp[index1][index2];
        }

        int ans = 0;

        if(word1[index1] == word2[index2]){
            ans = Memoization(index1 + 1 , index2 + 1 , word1 , word2 , dp);
        }

        else{
            int option1 = 1 + Memoization(index1 + 1 , index2 , word1 , word2 , dp);

            int option2 = 1 + Memoization(index1 , index2 + 1 , word1 , word2 , dp);

            ans = min(option1 , option2);
        }
        
        dp[index1][index2] = ans;

        return dp[index1][index2];
    }

    int Tabulation(string &word1 , string &word2){
        int n1 = word1.size();
        int n2 = word2.size();

        vector<vector<int>> dp(n1 + 1 , vector<int>(n2 + 1 , 0));
        
        for(int j = 0 ; j <= n2 ; j++){
            dp[n1][j] = n2 - j;
        }

        for(int i = 0; i <= n1 ; i++){
            dp[i][n2] = n1 - i;
        }

        for(int i = n1 - 1 ; i >= 0 ; i--){
            for(int j = n2 - 1 ; j >= 0 ; j--){
                int ans = 0;

                if(word1[i] == word2[j]){
                    ans = dp[i + 1][j+ 1];
                }

                else{
                    int option1 = 1 + dp[i+ 1][j];

                    int option2 = 1 + dp[i][j + 1];

                    ans = min(option1 , option2);
                }
                
                dp[i][j] = ans;
            }
        }
         
        return dp[0][0];
    }

    int minDistance(string word1, string word2) {
        // int ans = usingRecurssion(0 , 0 , word1 , word2);
        
        // int n1 = word1.size();
        // int n2 = word2.size();

        // vector<vector<int>> dp(n1 + 1 , vector<int>(n2 + 1 , -1));

        // int ans = Memoization(0 , 0 , word1 , word2 , dp);

        int ans = Tabulation(word1 , word2);

        return ans;
    }
};
