class Solution {
public:
    int usingRecurssion(int index1 , int index2 , string &s , string &t){
        if(index2 >= t.size()){
            return 1;
        }
        
        if(index1 >= s.size()){
            return 0;
        }

        int ans = 0;

        if(s[index1] == t[index2]){
            ans = ans + usingRecurssion(index1 + 1 , index2 + 1 , s , t);
        }

        ans = ans + usingRecurssion(index1 + 1 , index2 , s , t);

        return ans;
    }

    int Memoization(int index1 , int index2 , string &s , string &t , vector<vector<int>> &dp){
        if(index2 >= t.size()){
            return 1;
        }
        
        if(index1 >= s.size()){
            return 0;
        }

        if(dp[index1][index2] != -1){
            return dp[index1][index2];
        }

        int ans = 0;

        if(s[index1] == t[index2]){
            ans = ans + Memoization(index1 + 1 , index2 + 1 , s , t , dp);
        }

        ans = ans + Memoization(index1 + 1 , index2 , s , t , dp);
        
        dp[index1][index2] = ans;

        return dp[index1][index2];
    }

    int Tabulation(string &s , string &t){
        int n1 = s.size();
        int n2 = t.size();

        vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , 0));

        const long long MOD = 1e9 + 7;

        for(int i = 0 ; i <= n1 ; i++){
            dp[i][n2] = 1;
        }

        for(int i = n1 - 1 ; i >= 0 ; i--){
            for(int j = n2 - 1 ; j >= 0 ; j--){
                int ans = 0;

                if(s[i] == t[j]){
                    ans = (ans + dp[i + 1][j + 1]) % MOD;
                }

                ans += (dp[i + 1][j]) % MOD;
                
                dp[i][j] = ans;
            }
        }

        return dp[0][0] % MOD;
    }

    int numDistinct(string s, string t) {
        // int ans = usingRecurssion(0  , 0 , s , t);

        // int n1 = s.size();
        // int n2 = t.size();

        // vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , -1));

        // int ans = Memoization(0 , 0 ,  s , t , dp);
        
        int ans = Tabulation(s , t);

        return ans;
    }
};
