// 2D DP approch
class Solution {
public: 
int solve(string &word1 , string &word2 , int i , int j ,  vector<vector<int>> &dp){
    if(i >= word1.size()){
        return word2.size() - j;
    }

    if(j >= word2.size()){
        return word1.size() - i;
    }

    if(dp[i][j] != -1){
        return dp[i][j];
    }

    int ans = 0;

    if(word1[i] == word2[j]){
        ans = solve(word1 , word2 , i + 1 , j + 1 , dp);
        dp[i][j] = ans;
    }

    else{
        //replace
        int replaceCase = 1 + solve(word1 , word2 , i + 1 , j + 1 , dp);

        //Delete
        int deleteCase = 1 + solve(word1 , word2 , i + 1 , j , dp);

        //Insert
        int insertCase = 1 + solve(word1 , word2 , i , j + 1 , dp);

        ans = min(replaceCase , min(deleteCase , insertCase));

        dp[i][j] = ans;
    }

    return dp[i][j];
}
    int minDistance(string word1, string word2) {
        int n1  = word1.size();
        int n2 = word2.size();

        vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , - 1));

        int ans = solve(word1 , word2 , 0 , 0 , dp);
        return ans;
    }
};
