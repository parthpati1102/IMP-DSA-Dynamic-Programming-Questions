class Solution {
public:
   int usingRecurssion(string &word1 , string &word2 , int i , int j){
        if(i >= word1.size()){
            return word2.size() - j;
        }

        if(j >= word2.size()){
            return word1.size() - i;
        }

        int ans;

        if(word1[i] == word2[j]){
            ans = usingRecurssion(word1 , word2 , i + 1 , j + 1);
        }

        else{

            //Insertion
            int opt1 = 1 + usingRecurssion(word1 , word2 , i , j + 1);
            
            //Deletion
            int opt2 = 1 + usingRecurssion(word1 , word2 , i + 1 , j);
            
            //Replace
            int opt3 = 1 + usingRecurssion(word1 , word2 , i + 1 , j + 1);

            ans = min(opt1 , min(opt2 , opt3));
        }

        return ans;
   }

   int Memoization(string &word1 , string &word2 , int i , int j , vector<vector<int>> &dp){
        if(i >= word1.size()){
            return word2.size() - j;
        }

        if(j >= word2.size()){
            return word1.size() - i;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int ans;

        if(word1[i] == word2[j]){
            ans = Memoization(word1 , word2 , i + 1 , j + 1 , dp);
        }

        else{

            //Insertion
            int opt1 = 1 + Memoization(word1 , word2 , i , j + 1 , dp);
            
            //Deletion
            int opt2 = 1 + Memoization(word1 , word2 , i + 1 , j , dp);
            
            //Replace
            int opt3 = 1 + Memoization(word1 , word2 , i + 1 , j + 1 , dp);

            ans = min(opt1 , min(opt2 , opt3));
        }
        
        dp[i][j] = ans;

        return dp[i][j];
   }

   int Tabulation(string &word1 , string &word2){

       int n1 = word1.size();
       int n2 = word2.size();

       vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , 0));

       for(int j = 0 ; j <= n2 ; j++){
           dp[n1][j] = n2 - j;
       }

       for(int i = 0 ; i <= n1 ; i++){
           dp[i][n2] = n1 - i;
       }

       for(int i = n1 - 1 ; i>= 0 ; i--){
        for(int j = n2 - 1 ; j >= 0 ; j--){
                int ans;

                if(word1[i] == word2[j]){
                    ans = dp[i + 1][j + 1];
                }

                else{

                    //Insertion
                    int opt1 = 1 + dp[i][j + 1];
                    
                    //Deletion
                    int opt2 = 1 + dp[i + 1][j];
                    
                    //Replace
                    int opt3 = 1 + dp[i + 1][j + 1];

                    ans = min(opt1 , min(opt2 , opt3));
                }
                
                dp[i][j] = ans;
            }
        }

        return dp[0][0];
   }

    int minDistance(string word1, string word2) {
        // int ans = usingRecurssion(word1 , word2 , 0 , 0);
         
        //  int n1 = word1.size();
        //  int n2 = word2.size();

        //  vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , -1));

        //  int ans = Memoization(word1 , word2 , 0 , 0 , dp);

        int ans = Tabulation(word1 , word2);

        return ans;
    }
};
