class Solution {
  public:
    int usingRecurssion(vector<int> &height , int index){
       if(index >= height.size() - 1){
           return 0;
       }
       
       int option1 = usingRecurssion(height , index + 1) + abs(height[index] - height[index + 1]);
       
       int option2 = INT_MAX;
       
       if(index + 2 < height.size()){
           option2 = usingRecurssion(height , index + 2 ) + abs(height[index] - height[index + 2]);
       }
       
       int ans = min(option1 , option2);
       
       return ans;
    }
    
    int Memoization(vector<int> &height , int index , vector<int> &dp){
       if(index >= height.size() - 1){
           return 0;
       }
       
       if(dp[index] != -1){
           return dp[index];
       }
       
       int option1 = Memoization(height , index + 1 , dp) + abs(height[index] - height[index + 1]);
       
       int option2 = INT_MAX;
       
       if(index + 2 < height.size()){
           option2 = Memoization(height , index + 2 , dp) + abs(height[index] - height[index + 2]);
       }
       
       int ans = min(option1 , option2);
       
       dp[index] = ans;
       
       return dp[index];
    }
    
    int Tabulation(vector<int> &height){
        int n = height.size();
        
        vector<int> dp(n + 1 , 0);
        
        for(int i = n - 2 ; i >= 0; i--){
           int option1 = dp[i + 1] + abs(height[i] - height[i + 1]);
       
           int option2 = INT_MAX;
           
           if(i + 2 < height.size()){
               option2 = dp[i + 2] + abs(height[i] - height[i + 2]);
           }
           
           int ans = min(option1 , option2);
           
           dp[i] = ans;
        }
        
        return dp[0];
    }
    int minCost(vector<int>& height) {
        // Code here
        // int ans = usingRecurssion(height , 0);
        
        // int n = height.size();
        
        // vector<int> dp(n + 1 , -1);
        
        // int ans = Memoization(height , 0 , dp);
        
        int ans = Tabulation(height);
        
        return ans;
    }
};
