class Solution {
public:
    // int usingRecurssion(int index , vector<int> &nums){
    //     if(index >= nums.size()){
    //         return 0;
    //     }

    //     int option1 = nums[index] + usingRecurssion(index + 2 , nums);

    //     int option2 = usingRecurssion(index + 1, nums);

    //     int ans = max(option1 , option2);

    //     return ans;
    // }

    // int Memoization(int index , vector<int> &nums , vector<int> &dp){
    //     if(index >= nums.size()){
    //         return 0;
    //     }
        
    //     if(dp[index] != -1){
    //         return dp[index];
    //     }

    //     int option1 = nums[index] + Memoization(index + 2 , nums , dp);

    //     int option2 = Memoization(index + 1, nums , dp);

    //     int ans = max(option1 , option2);

    //     dp[index] = ans;

    //     return dp[index];
    // }

    int Tabulation(vector<int> & nums){
        int n = nums.size();

        vector<int> dp(n , -1);

        dp[n - 1] = nums[n - 1];

        for(int i = n - 2; i >= 0 ; i--){
            int tempAns = 0;

            if(i + 2 < n){
                tempAns = dp[i + 2];
            }

            int option1 = nums[i] + tempAns;

            int option2 = dp[i + 1];

            dp[i] = max(option1 , option2);
        }

        return dp[0];
    }
    int rob(vector<int>& nums) {
        // int ans = usingRecurssion(0 , nums);
        
        // vector<int> dp(nums.size() + 1 , -1);
        // int ans = Memoization(0 , nums , dp);

        int ans = Tabulation(nums);

        return ans;
    }
};
