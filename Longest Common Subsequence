class Solution {
public:
   int usingRecurssion(string &text1 , string &text2 , int index1 , int index2){
       if(index1 >= text1.size() || index2 >= text2.size()){
            return 0;
       }
       
       int ans = 0;
       if(text1[index1] == text2[index2]){
           ans = 1 + usingRecurssion(text1 , text2 , index1 + 1 , index2 + 1);
       }

       else{
         ans = max(usingRecurssion(text1 , text2 , index1 + 1 , index2) , usingRecurssion(text1 , text2 , index1 , index2 + 1));
       }

       return ans;
   }
   int Memoization(string &text1 , string &text2 , int index1 , int index2 , vector<vector<int>> &dp){
       if(index1 >= text1.size() || index2 >= text2.size()){
            return 0;
       }
       
       if(dp[index1][index2] != -1){
          return dp[index1][index2];
       }

       int ans = 0;

       if(text1[index1] == text2[index2]){
           ans = 1 + Memoization(text1 , text2 , index1 + 1 , index2 + 1 , dp);
       }

       else{
         ans = max(Memoization(text1 , text2 , index1 + 1 , index2 , dp) , Memoization(text1 , text2 , index1 , index2 + 1 , dp));
       }
        
       dp[index1][index2] = ans;

       return dp[index1][index2];
   }

   int Tabulation(string &text1 , string &text2){
        int n1 = text1.size();
        int n2 = text2.size();

        vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , 0));

        for(int i = n1 - 1 ; i >= 0 ; i--){
            for(int j = n2 - 1 ; j >= 0 ; j--){
                int ans = 0;

                if(text1[i] == text2[j]){
                    ans = 1 + dp[i + 1][j + 1];
                }

                else{
                    ans = max(dp[i + 1][j] , dp[i][j + 1]);
                }
                    
                dp[i][j] = ans;
            }
        }

        return dp[0][0];
   }
    int longestCommonSubsequence(string text1, string text2) {
        // int ans = usingRecurssion(text1 , text2 , 0 , 0);
        // int n1 = text1.size();
        // int n2 = text2.size();

        // vector<vector<int>> dp(n1 + 1 , vector<int> (n2 + 1 , -1));
        
        // int ans = Memoization(text1 , text2 , 0 , 0 , dp);

        int ans = Tabulation(text1 , text2);

        return ans;
    }
};
