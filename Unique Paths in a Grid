class Solution {
  public:
    int MOD = 1e9 + 7;
    int solve(int n , int m , vector<vector<int>> &grid , int start , int end , vector<vector<int>> &dp){
         if( start >= n || end >= m || grid[start][end] == 0){
             return 0;
         }
         
         if(start >= n - 1 && end == m - 1){
             return 1;
         }
         
         if(dp[start][end] != -1){
             return dp[start][end];
         }
         
         int bottom = solve(n , m , grid , start + 1 , end , dp) % MOD;
         
         int right = solve(n , m , grid , start , end + 1 , dp) % MOD;
         
         int count = (bottom + right) % MOD;
         
         dp[start][end] = count;
         
         return dp[start][end];
    }
    
    int uniquePaths(int n, int m, vector<vector<int>> &grid) {
        // code here
        if(grid[0][0] == 0 || grid[n - 1][m - 1] == 0){
            return 0;
        }
        
        int start = 0;
        int end = 0;
        
        vector<vector<int>> dp(n + 1 , vector<int> (m + 1 , -1));
        
        int uniquePath = solve(n , m , grid  , start , end , dp);
        
        return uniquePath;
    }
};
